use crate::config::quinn::QuinnJsonConfig;
use anyhow::Context;
use fastrand::Rng;
use in_memory_network::quinn_interop::InMemoryUdpSocket;
use quinn::Endpoint;
use rustls::pki_types::{CertificateDer, PrivateKeyDer};
use std::sync::Arc;
use tokio::sync::mpsc::UnboundedReceiver;
use tokio::task::JoinHandle;

pub static _CERT_DER_ECDSA: &[u8] = &[
    0x30, 0x82, 0x1, 0x60, 0x30, 0x82, 0x1, 0x6, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x14, 0x1f, 0xa0,
    0x6c, 0xd, 0xd6, 0xf8, 0x7b, 0xc4, 0xac, 0x30, 0xd8, 0xb3, 0x92, 0x28, 0x41, 0xe0, 0xbc, 0xdd,
    0xb8, 0xbf, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x30, 0x21, 0x31,
    0x1f, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x16, 0x72, 0x63, 0x67, 0x65, 0x6e, 0x20,
    0x73, 0x65, 0x6c, 0x66, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74,
    0x30, 0x20, 0x17, 0xd, 0x37, 0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x5a, 0x18, 0xf, 0x34, 0x30, 0x39, 0x36, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x5a, 0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x16, 0x72,
    0x63, 0x67, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
    0x20, 0x63, 0x65, 0x72, 0x74, 0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x6e,
    0xa1, 0x7f, 0x2, 0x1f, 0x93, 0x27, 0xfa, 0x4a, 0xbe, 0x6d, 0xf, 0xc3, 0x51, 0x6, 0x7f, 0x44,
    0x29, 0xfd, 0x2a, 0x8d, 0x88, 0x77, 0x7d, 0x27, 0x2e, 0xa7, 0xe0, 0x4e, 0xc, 0x5a, 0xfa, 0x69,
    0x60, 0xeb, 0x1e, 0x14, 0xd3, 0xc1, 0xe3, 0xa3, 0x19, 0xa5, 0x42, 0x9a, 0xd5, 0x94, 0xb4, 0xf3,
    0xa8, 0xbe, 0x40, 0xbd, 0xd7, 0x11, 0x1f, 0x9d, 0xa7, 0x78, 0x1d, 0xf9, 0x6, 0x3b, 0xb, 0xa3,
    0x1a, 0x30, 0x18, 0x30, 0x16, 0x6, 0x3, 0x55, 0x1d, 0x11, 0x4, 0xf, 0x30, 0xd, 0x82, 0xb, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x3, 0x48, 0x0, 0x30, 0x45, 0x2, 0x20, 0x26, 0x13, 0x84, 0x38,
    0xed, 0x5d, 0xde, 0xa2, 0x6f, 0xa6, 0xe9, 0x38, 0x41, 0xd0, 0xdd, 0xfa, 0x3b, 0x48, 0x21, 0x83,
    0xcd, 0xf6, 0x12, 0x8, 0x40, 0x7f, 0xaa, 0xdf, 0xad, 0xae, 0x7c, 0x85, 0x2, 0x21, 0x0, 0xf1,
    0x1, 0x65, 0xde, 0xed, 0x15, 0xf7, 0xe0, 0x98, 0xbe, 0x68, 0xce, 0x22, 0xde, 0x35, 0xf5, 0x9e,
    0x3, 0x85, 0xea, 0xd7, 0xb3, 0xe7, 0x2c, 0x5e, 0x7a, 0xab, 0x25, 0x66, 0xae, 0xc0, 0xfa,
];

pub static CERT_DER_RSA: &[u8] = &[
    0x30, 0x82, 0x2, 0xec, 0x30, 0x82, 0x1, 0xd4, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x14, 0x55, 0xe2,
    0xd, 0x6e, 0xa, 0x9c, 0xb3, 0x63, 0x46, 0xaa, 0x75, 0xdf, 0x38, 0xe6, 0x1b, 0xaa, 0x8c, 0x19,
    0xc9, 0xf6, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xc, 0x5, 0x0,
    0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x16, 0x72, 0x63, 0x67,
    0x65, 0x6e, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x63,
    0x65, 0x72, 0x74, 0x30, 0x20, 0x17, 0xd, 0x37, 0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x5a, 0x18, 0xf, 0x34, 0x30, 0x39, 0x36, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x4, 0x3,
    0xc, 0x16, 0x72, 0x63, 0x67, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x73, 0x69, 0x67,
    0x6e, 0x65, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9,
    0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30,
    0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xa2, 0x49, 0xe4, 0xcd, 0xcb, 0x18, 0x1b, 0x7d, 0xa6,
    0x7a, 0x31, 0x96, 0x2c, 0xd6, 0x66, 0x76, 0xa8, 0xb7, 0x8b, 0xe2, 0xeb, 0xec, 0x7d, 0xb4, 0xc0,
    0x81, 0x9, 0xb3, 0x47, 0x2c, 0x87, 0x61, 0xdb, 0x90, 0xb, 0x6d, 0x9d, 0xa8, 0x78, 0xf3, 0xe,
    0xa8, 0x9c, 0x15, 0xd4, 0xfb, 0x17, 0x0, 0xee, 0xb4, 0x6f, 0xdb, 0x31, 0xee, 0x59, 0x7e, 0x7c,
    0xc3, 0x83, 0x96, 0x47, 0x1e, 0xd4, 0x18, 0x1b, 0xb6, 0xa2, 0x24, 0x94, 0xa2, 0xea, 0x7, 0xa5,
    0x12, 0x29, 0x98, 0x34, 0x32, 0x6a, 0xed, 0x3d, 0x62, 0x5c, 0xb7, 0xcf, 0xa8, 0xa4, 0xbe, 0xb7,
    0x56, 0x9d, 0x21, 0xfd, 0x7e, 0xb4, 0x0, 0xd8, 0x83, 0xa3, 0x38, 0x22, 0x7a, 0x6e, 0xad, 0xd,
    0x54, 0x48, 0xa, 0x17, 0xfe, 0x7a, 0x89, 0xcd, 0x89, 0xb0, 0xa8, 0x8f, 0xde, 0x47, 0x1b, 0x8d,
    0xc1, 0xef, 0x3, 0x85, 0x20, 0x87, 0xea, 0xb7, 0x8d, 0xe, 0xc7, 0x92, 0x3e, 0x5a, 0xb6, 0xb0,
    0xfa, 0xa9, 0x85, 0xc9, 0x8f, 0xfa, 0x10, 0xf4, 0xf8, 0xe, 0x12, 0xa8, 0xda, 0xbe, 0x36, 0x42,
    0x6f, 0xc5, 0x18, 0x42, 0xe5, 0x73, 0x90, 0xbb, 0xb8, 0x9, 0xf0, 0x70, 0x80, 0x5a, 0xc3, 0x2c,
    0x59, 0xe7, 0xb8, 0xca, 0x24, 0x95, 0x5f, 0x6, 0xce, 0xa4, 0x7, 0x7a, 0x60, 0x71, 0xd5, 0x15,
    0x56, 0x8d, 0x47, 0xe4, 0xd3, 0x86, 0xc, 0xe3, 0x7b, 0xe5, 0x92, 0xad, 0x20, 0x67, 0x99, 0xfe,
    0xff, 0x51, 0xab, 0x32, 0x27, 0xfa, 0x39, 0xa5, 0x8, 0x93, 0x1e, 0xc4, 0x99, 0x94, 0x5f, 0xf7,
    0x97, 0x5, 0x8d, 0x3f, 0xa9, 0xf2, 0xed, 0xa8, 0x96, 0x8b, 0x62, 0x25, 0xf1, 0x79, 0xbe, 0xf3,
    0x9d, 0x59, 0x1, 0x2f, 0xbd, 0xb9, 0xd3, 0xdc, 0x35, 0x1d, 0x1c, 0xf2, 0xe, 0xc0, 0xde, 0xe3,
    0xb, 0x7e, 0x7e, 0xf5, 0xba, 0x29, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa3, 0x1a, 0x30, 0x18, 0x30,
    0x16, 0x6, 0x3, 0x55, 0x1d, 0x11, 0x4, 0xf, 0x30, 0xd, 0x82, 0xb, 0x73, 0x65, 0x72, 0x76, 0x65,
    0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd,
    0x1, 0x1, 0xc, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0xc, 0x8e, 0xd7, 0xce, 0x3e, 0x5c, 0xff,
    0x49, 0x6c, 0x2f, 0x2c, 0xe6, 0x73, 0x34, 0x27, 0xd1, 0x17, 0xc5, 0x5b, 0xe3, 0xd, 0xf0, 0x16,
    0xfe, 0x8, 0x7c, 0x80, 0x5c, 0xda, 0x4b, 0xb4, 0xe7, 0xa4, 0x7a, 0xb4, 0x71, 0x42, 0x82, 0xf7,
    0x87, 0xf5, 0x21, 0xa6, 0xda, 0x60, 0xb5, 0xc9, 0xe0, 0xa0, 0x83, 0xf9, 0xc8, 0xcb, 0xf0, 0x58,
    0x81, 0x2b, 0x76, 0x5d, 0x27, 0xaf, 0x26, 0x98, 0x81, 0x6f, 0x7c, 0x2e, 0xfc, 0x9b, 0xe, 0xf3,
    0xed, 0xca, 0x12, 0x24, 0x1b, 0xbc, 0xa9, 0xab, 0x47, 0xca, 0x57, 0x5d, 0x8f, 0x91, 0x4f, 0xa,
    0xb0, 0x77, 0xec, 0x3c, 0xc, 0x7a, 0xee, 0x18, 0xa7, 0x29, 0x5, 0x5c, 0xcd, 0x77, 0xdd, 0xbb,
    0x5e, 0x51, 0x25, 0x5c, 0x39, 0x36, 0x50, 0x24, 0xc, 0x4a, 0xb8, 0x8a, 0x1, 0xd3, 0xba, 0x7c,
    0xab, 0x47, 0x90, 0x2, 0x7d, 0x20, 0x2, 0x5d, 0x8e, 0x62, 0xde, 0x16, 0x58, 0xda, 0xad, 0x44,
    0xe2, 0x25, 0xf7, 0xff, 0x15, 0x22, 0x22, 0x7c, 0xcb, 0x6f, 0x65, 0x80, 0x70, 0x9a, 0x4f, 0xd3,
    0xa2, 0x61, 0x25, 0x3d, 0x42, 0xb0, 0x83, 0x8b, 0x9, 0xf3, 0xbf, 0x74, 0x88, 0x1e, 0x36, 0x8,
    0xcd, 0x5a, 0xd3, 0x47, 0xa7, 0xb6, 0xff, 0x1c, 0xed, 0xdd, 0xa8, 0xcd, 0x7f, 0xe9, 0x36, 0x5e,
    0x96, 0x99, 0xa9, 0x8f, 0xc4, 0xd9, 0xdc, 0xaa, 0x38, 0x29, 0x71, 0xe5, 0x80, 0xd4, 0x4, 0x81,
    0xbf, 0x19, 0xf0, 0x41, 0x20, 0x21, 0x7a, 0x79, 0x89, 0x21, 0x75, 0x61, 0x63, 0x95, 0x3f, 0x7d,
    0x26, 0xbf, 0xd1, 0x4e, 0x8a, 0x3a, 0x34, 0x89, 0x95, 0x3a, 0xea, 0x7f, 0xea, 0x2e, 0xbc, 0xb0,
    0xd6, 0x5c, 0x69, 0xc7, 0xf, 0x2d, 0xb8, 0x4d, 0x90, 0xe3, 0x6, 0x6, 0xbf, 0xff, 0x41, 0x81,
    0x9, 0x5e, 0x39, 0x11, 0x53, 0x3e, 0x6a, 0x4b, 0x8d,
];

pub static KEY_PAIR_DER_RSA: &[u8] = &[
    0x30, 0x82, 0x4, 0xbd, 0x2, 0x1, 0x0, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd,
    0x1, 0x1, 0x1, 0x5, 0x0, 0x4, 0x82, 0x4, 0xa7, 0x30, 0x82, 0x4, 0xa3, 0x2, 0x1, 0x0, 0x2, 0x82,
    0x1, 0x1, 0x0, 0xa2, 0x49, 0xe4, 0xcd, 0xcb, 0x18, 0x1b, 0x7d, 0xa6, 0x7a, 0x31, 0x96, 0x2c,
    0xd6, 0x66, 0x76, 0xa8, 0xb7, 0x8b, 0xe2, 0xeb, 0xec, 0x7d, 0xb4, 0xc0, 0x81, 0x9, 0xb3, 0x47,
    0x2c, 0x87, 0x61, 0xdb, 0x90, 0xb, 0x6d, 0x9d, 0xa8, 0x78, 0xf3, 0xe, 0xa8, 0x9c, 0x15, 0xd4,
    0xfb, 0x17, 0x0, 0xee, 0xb4, 0x6f, 0xdb, 0x31, 0xee, 0x59, 0x7e, 0x7c, 0xc3, 0x83, 0x96, 0x47,
    0x1e, 0xd4, 0x18, 0x1b, 0xb6, 0xa2, 0x24, 0x94, 0xa2, 0xea, 0x7, 0xa5, 0x12, 0x29, 0x98, 0x34,
    0x32, 0x6a, 0xed, 0x3d, 0x62, 0x5c, 0xb7, 0xcf, 0xa8, 0xa4, 0xbe, 0xb7, 0x56, 0x9d, 0x21, 0xfd,
    0x7e, 0xb4, 0x0, 0xd8, 0x83, 0xa3, 0x38, 0x22, 0x7a, 0x6e, 0xad, 0xd, 0x54, 0x48, 0xa, 0x17,
    0xfe, 0x7a, 0x89, 0xcd, 0x89, 0xb0, 0xa8, 0x8f, 0xde, 0x47, 0x1b, 0x8d, 0xc1, 0xef, 0x3, 0x85,
    0x20, 0x87, 0xea, 0xb7, 0x8d, 0xe, 0xc7, 0x92, 0x3e, 0x5a, 0xb6, 0xb0, 0xfa, 0xa9, 0x85, 0xc9,
    0x8f, 0xfa, 0x10, 0xf4, 0xf8, 0xe, 0x12, 0xa8, 0xda, 0xbe, 0x36, 0x42, 0x6f, 0xc5, 0x18, 0x42,
    0xe5, 0x73, 0x90, 0xbb, 0xb8, 0x9, 0xf0, 0x70, 0x80, 0x5a, 0xc3, 0x2c, 0x59, 0xe7, 0xb8, 0xca,
    0x24, 0x95, 0x5f, 0x6, 0xce, 0xa4, 0x7, 0x7a, 0x60, 0x71, 0xd5, 0x15, 0x56, 0x8d, 0x47, 0xe4,
    0xd3, 0x86, 0xc, 0xe3, 0x7b, 0xe5, 0x92, 0xad, 0x20, 0x67, 0x99, 0xfe, 0xff, 0x51, 0xab, 0x32,
    0x27, 0xfa, 0x39, 0xa5, 0x8, 0x93, 0x1e, 0xc4, 0x99, 0x94, 0x5f, 0xf7, 0x97, 0x5, 0x8d, 0x3f,
    0xa9, 0xf2, 0xed, 0xa8, 0x96, 0x8b, 0x62, 0x25, 0xf1, 0x79, 0xbe, 0xf3, 0x9d, 0x59, 0x1, 0x2f,
    0xbd, 0xb9, 0xd3, 0xdc, 0x35, 0x1d, 0x1c, 0xf2, 0xe, 0xc0, 0xde, 0xe3, 0xb, 0x7e, 0x7e, 0xf5,
    0xba, 0x29, 0x87, 0x2, 0x3, 0x1, 0x0, 0x1, 0x2, 0x82, 0x1, 0x0, 0x34, 0x8c, 0x0, 0x8d, 0xb1,
    0xc8, 0xe8, 0x7d, 0xd2, 0xbd, 0x95, 0xf8, 0xae, 0x23, 0xed, 0xa1, 0x56, 0x17, 0xb8, 0x2f, 0x8d,
    0x7c, 0x51, 0x67, 0x89, 0x3d, 0x3e, 0xca, 0xd1, 0xac, 0xd5, 0x59, 0x16, 0x22, 0x99, 0xd0, 0xb0,
    0x4f, 0xb0, 0x79, 0xe2, 0xb1, 0x2d, 0x78, 0xd4, 0x31, 0x48, 0xcd, 0x80, 0x7c, 0xe4, 0xa, 0xf1,
    0x2b, 0xdf, 0xc6, 0x58, 0xd7, 0x65, 0x6f, 0xef, 0x2f, 0x48, 0x35, 0x56, 0x23, 0xd8, 0x74, 0x47,
    0xbc, 0x48, 0x52, 0x99, 0x5c, 0x3c, 0x23, 0x90, 0x23, 0x13, 0x4, 0x25, 0xf0, 0x7, 0x5d, 0x6c,
    0xdb, 0x8a, 0x1c, 0x46, 0x78, 0xc1, 0x0, 0x14, 0x78, 0x46, 0x8, 0x50, 0x12, 0xaf, 0x72, 0xa9,
    0x97, 0x42, 0xe6, 0xbd, 0x7e, 0x20, 0xa5, 0x44, 0x7, 0x9d, 0xdd, 0xa8, 0xb3, 0x80, 0x83, 0xd3,
    0xb1, 0x81, 0xc, 0xa6, 0xe5, 0xb8, 0x62, 0x47, 0x64, 0xb5, 0x1d, 0x2, 0xac, 0xc2, 0x75, 0xcf,
    0x49, 0x96, 0x69, 0xe7, 0x43, 0xe2, 0xe7, 0x76, 0xa7, 0xa2, 0xfe, 0xdd, 0x5e, 0x50, 0x1, 0x4d,
    0xe2, 0x33, 0xba, 0x4d, 0xf5, 0xdd, 0x77, 0x80, 0xea, 0x8d, 0xe4, 0xe1, 0xf7, 0xa6, 0xb7, 0xef,
    0xab, 0x9e, 0x19, 0x58, 0xe0, 0x8d, 0xa0, 0xd5, 0x22, 0x96, 0xca, 0x30, 0x40, 0xb5, 0xc, 0x2a,
    0x50, 0x49, 0x35, 0x42, 0x63, 0x2c, 0x3d, 0xab, 0x6a, 0x32, 0xde, 0x2a, 0x3d, 0x7c, 0xd2, 0x34,
    0xb4, 0xe5, 0x21, 0xc, 0xa3, 0xf2, 0x31, 0x79, 0x3c, 0xd3, 0x50, 0x60, 0xd0, 0x71, 0x85, 0xe4,
    0x3a, 0x2, 0xbd, 0x5c, 0x7f, 0x70, 0xc8, 0x6b, 0xa8, 0x18, 0xbe, 0xe2, 0x24, 0x80, 0x70, 0xd8,
    0x90, 0x1c, 0x63, 0x58, 0xa8, 0x34, 0xe9, 0x4f, 0x27, 0xd, 0xa3, 0x28, 0x92, 0x21, 0x58, 0x7d,
    0x83, 0x35, 0x92, 0xfd, 0xe, 0x80, 0xae, 0x3d, 0x87, 0x7d, 0x21, 0x2, 0x81, 0x81, 0x0, 0xd1,
    0xc8, 0x66, 0xc9, 0xb8, 0x4e, 0x6b, 0xf8, 0x7c, 0xc7, 0xfd, 0x3c, 0x82, 0xed, 0x15, 0x6c, 0x61,
    0x91, 0x56, 0x4b, 0xdb, 0x93, 0x19, 0x72, 0x28, 0x96, 0x58, 0xb3, 0x52, 0xa4, 0xdb, 0xbb, 0x56,
    0x72, 0xaa, 0xe8, 0xbe, 0x6c, 0xef, 0xf2, 0xa3, 0xe6, 0x27, 0x94, 0x44, 0x7c, 0xd1, 0x43, 0x12,
    0x6, 0x80, 0x66, 0x1f, 0x4f, 0xbe, 0xd9, 0x62, 0xaa, 0xd9, 0xc5, 0xa7, 0x2d, 0x90, 0x6a, 0x47,
    0xc1, 0x7b, 0xee, 0x8c, 0x3f, 0xb, 0xfd, 0xa5, 0x35, 0x6e, 0xc6, 0xe7, 0x52, 0xca, 0x9f, 0x24,
    0xca, 0xc, 0xe5, 0x97, 0x27, 0x38, 0xda, 0x9, 0x2f, 0xcf, 0x1f, 0xd1, 0x9f, 0x95, 0x92, 0xb9,
    0x13, 0xe8, 0x51, 0x3c, 0x2e, 0x9f, 0xad, 0x69, 0x63, 0x73, 0xaa, 0xf0, 0x7e, 0xb3, 0xee, 0x97,
    0x56, 0x98, 0xe, 0xc, 0xe2, 0x34, 0xe, 0x63, 0xdb, 0x1c, 0xe7, 0x9b, 0x8c, 0x73, 0xb, 0x2,
    0x81, 0x81, 0x0, 0xc6, 0xa, 0xdb, 0x4, 0xe, 0x28, 0x6b, 0x96, 0x9d, 0x9, 0x94, 0xa6, 0x1, 0x7e,
    0xec, 0x17, 0xa9, 0xae, 0x75, 0x61, 0x64, 0x79, 0x16, 0x42, 0x45, 0x5f, 0xdf, 0x5f, 0x68, 0x94,
    0x2f, 0xfe, 0x20, 0x29, 0x53, 0x74, 0x19, 0x4d, 0x34, 0xff, 0x41, 0xed, 0x3a, 0xd7, 0x85, 0x15,
    0x4f, 0x14, 0x1, 0x63, 0xd8, 0xc6, 0x2e, 0xdb, 0x61, 0xb3, 0x6a, 0x2f, 0x37, 0x62, 0x1b, 0x31,
    0xe0, 0x1b, 0xc4, 0x44, 0x88, 0xa0, 0x1a, 0xcf, 0x93, 0xce, 0x52, 0xae, 0xd4, 0x1b, 0xb2, 0x8e,
    0x63, 0x20, 0x75, 0x85, 0x7b, 0x31, 0x56, 0xc1, 0x5d, 0x9b, 0x13, 0xa5, 0xbc, 0xc6, 0x5c, 0x6b,
    0xb1, 0x61, 0xc0, 0xce, 0x39, 0x39, 0x3e, 0x4b, 0x74, 0x41, 0xf, 0x52, 0x95, 0x8d, 0x4, 0x6a,
    0xd4, 0x8d, 0x7, 0x9d, 0xc8, 0xec, 0x5b, 0x80, 0x93, 0x4d, 0x72, 0xf6, 0x4e, 0xcf, 0x7e, 0xfa,
    0x30, 0xf5, 0x2, 0x81, 0x80, 0x24, 0x5a, 0x83, 0x1d, 0x7f, 0xd7, 0xef, 0x33, 0xff, 0x83, 0xb4,
    0xa9, 0xb0, 0xd2, 0x9e, 0xfc, 0xca, 0x27, 0xa2, 0x79, 0xc0, 0xd2, 0x4b, 0xfd, 0x91, 0x75, 0x4,
    0x68, 0x6, 0xf1, 0x54, 0xb6, 0xb1, 0x33, 0x6b, 0xd4, 0xab, 0x73, 0x3b, 0x5d, 0xa3, 0xf3, 0x75,
    0x76, 0x67, 0x2b, 0xee, 0x23, 0x9e, 0x53, 0xc, 0x1b, 0x26, 0x5f, 0xee, 0x65, 0xc3, 0x88, 0x71,
    0xf6, 0xa3, 0x92, 0xec, 0xcc, 0xce, 0x24, 0x84, 0x72, 0x81, 0x51, 0x47, 0xa5, 0xab, 0xe4, 0x87,
    0x8e, 0xe6, 0x75, 0x5d, 0x71, 0x98, 0xb1, 0x7e, 0xec, 0xa6, 0x76, 0x0, 0x8f, 0x20, 0x3a, 0x6d,
    0xbd, 0x48, 0xd9, 0x4b, 0xd5, 0x42, 0x47, 0x65, 0xe1, 0xf5, 0xf8, 0xea, 0x68, 0xe5, 0xb3, 0x7b,
    0x4e, 0xeb, 0x20, 0x39, 0xd4, 0x25, 0xdb, 0xb6, 0xbb, 0xf0, 0x95, 0x9e, 0x89, 0xc3, 0xda, 0x2b,
    0xb7, 0x23, 0x28, 0x82, 0xa3, 0x2, 0x81, 0x81, 0x0, 0xa1, 0xc8, 0x88, 0x76, 0xdd, 0xa2, 0x3,
    0x92, 0x3c, 0xa3, 0x70, 0xfd, 0xd4, 0x46, 0xfd, 0x53, 0xaf, 0x58, 0x47, 0xa7, 0xd2, 0x4e, 0x60,
    0xf2, 0xae, 0x7d, 0xcd, 0x9a, 0xc1, 0x72, 0x1d, 0x6a, 0xba, 0x97, 0x48, 0x7, 0x96, 0xb, 0xce,
    0x79, 0xa0, 0x3f, 0xce, 0x4b, 0xf5, 0xfa, 0x1c, 0x69, 0xb9, 0x60, 0xf9, 0xdb, 0x9c, 0xb7, 0xb7,
    0x2e, 0xbc, 0x55, 0xea, 0x26, 0x89, 0x14, 0xcb, 0x81, 0xa3, 0x6a, 0x61, 0x3a, 0x79, 0xec, 0x8d,
    0x50, 0x85, 0x97, 0x30, 0xcb, 0x97, 0xa8, 0x5e, 0x2e, 0x4c, 0x13, 0x49, 0x3a, 0x5b, 0x27, 0x7,
    0xf3, 0x1, 0xaf, 0xe9, 0x71, 0x1a, 0x5b, 0x17, 0xc3, 0x45, 0xa0, 0xb2, 0x7a, 0xa2, 0xfb, 0x3c,
    0xf3, 0x51, 0x33, 0x23, 0xdc, 0xd9, 0x78, 0xf4, 0x3e, 0x69, 0xb4, 0x6a, 0x49, 0x3b, 0xce, 0xe3,
    0x86, 0xe7, 0x9d, 0x73, 0x70, 0x6a, 0xc8, 0xb4, 0x69, 0x2, 0x81, 0x80, 0x57, 0x79, 0x25, 0xa0,
    0x61, 0x8b, 0x1a, 0x5c, 0x54, 0x22, 0x57, 0xef, 0xf, 0x25, 0x31, 0xa0, 0xdf, 0x8b, 0x15, 0x7,
    0x81, 0xe8, 0xdb, 0x2b, 0x16, 0xe7, 0xa6, 0x3d, 0x7f, 0x60, 0xf2, 0x84, 0xb2, 0x8d, 0x80, 0x1d,
    0xbd, 0xbf, 0xad, 0x69, 0x9c, 0x26, 0xb7, 0x3d, 0x30, 0xc3, 0x51, 0xd8, 0x68, 0x88, 0x4c, 0xe,
    0xd3, 0x38, 0xaa, 0x3a, 0xac, 0xc0, 0xc6, 0xa3, 0x86, 0x88, 0x90, 0xf5, 0xd1, 0x62, 0x54, 0x2f,
    0xe1, 0xe6, 0x8c, 0x84, 0x8b, 0x99, 0x57, 0x4d, 0xe6, 0x56, 0xe6, 0x58, 0xd7, 0x69, 0xd, 0xce,
    0xef, 0xc5, 0x38, 0xed, 0x41, 0x91, 0xc5, 0x57, 0xc6, 0x4c, 0x9e, 0xa6, 0x28, 0x8f, 0xdf, 0xaf,
    0x5, 0xe0, 0x9d, 0x82, 0x4, 0x55, 0xcb, 0x4d, 0xce, 0xa6, 0xe3, 0x29, 0xe7, 0x35, 0x4f, 0xaf,
    0x23, 0xd5, 0x3c, 0x7, 0xc5, 0xf2, 0xfc, 0xb6, 0xb5, 0xc5, 0x24, 0x75,
];

pub static _KEY_PAIR_DER_ECDSA: &[u8] = &[
    0x30, 0x81, 0x87, 0x2, 0x1, 0x0, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1,
    0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x4, 0x6d, 0x30, 0x6b, 0x2, 0x1, 0x1,
    0x4, 0x20, 0xff, 0xde, 0x24, 0xb6, 0x80, 0x1b, 0xe1, 0xb8, 0x9f, 0xe5, 0xe0, 0xe7, 0x61, 0x58,
    0x4e, 0xa7, 0x1b, 0x45, 0x31, 0xe7, 0xbb, 0xeb, 0x0, 0xa5, 0x3f, 0x1a, 0x8, 0x7, 0x37, 0xab,
    0x32, 0x8c, 0xa1, 0x44, 0x3, 0x42, 0x0, 0x4, 0x6e, 0xa1, 0x7f, 0x2, 0x1f, 0x93, 0x27, 0xfa,
    0x4a, 0xbe, 0x6d, 0xf, 0xc3, 0x51, 0x6, 0x7f, 0x44, 0x29, 0xfd, 0x2a, 0x8d, 0x88, 0x77, 0x7d,
    0x27, 0x2e, 0xa7, 0xe0, 0x4e, 0xc, 0x5a, 0xfa, 0x69, 0x60, 0xeb, 0x1e, 0x14, 0xd3, 0xc1, 0xe3,
    0xa3, 0x19, 0xa5, 0x42, 0x9a, 0xd5, 0x94, 0xb4, 0xf3, 0xa8, 0xbe, 0x40, 0xbd, 0xd7, 0x11, 0x1f,
    0x9d, 0xa7, 0x78, 0x1d, 0xf9, 0x6, 0x3b, 0xb,
];

// A server that concurrently handles connections and their streams. Each stream is expected to make
// a "request" in the form `GET /index.html`.
pub fn server_listen(
    endpoint: Endpoint,
    response_payload_size: usize,
) -> UnboundedReceiver<JoinHandle<anyhow::Result<()>>> {
    let (connection_result_tx, connection_result_rx) = tokio::sync::mpsc::unbounded_channel();

    tokio::spawn(async move {
        let response: Vec<_> = "Lorem ipsum "
            .bytes()
            .cycle()
            .take(response_payload_size)
            .collect();
        let response = Arc::new(response);

        while let Some(incoming) = endpoint.accept().await {
            let response = response.clone();
            let task = tokio::spawn(async move {
                let conn = incoming.await?;

                let mut stream_tasks = Vec::new();
                while let Ok((mut tx, mut rx)) = conn.accept_bi().await {
                    let response = response.clone();
                    let stream_task = tokio::spawn(async move {
                        // Read the request
                        let request = rx.read_to_end(usize::MAX).await?;
                        assert_eq!(request, b"GET /index.html");

                        // Respond
                        tx.write_all(&response).await?;
                        tx.finish()?;
                        tx.stopped().await?;

                        Result::<_, anyhow::Error>::Ok(())
                    });

                    stream_tasks.push(stream_task);
                }

                for task in stream_tasks {
                    task.await
                        .context("server stream task crashed")?
                        .context("server stream task errored")?;
                }

                Result::<_, anyhow::Error>::Ok(())
            });

            // Notify observers that we are done handling the connection
            connection_result_tx.send(task).unwrap();
        }
    });

    connection_result_rx
}

pub fn server_endpoint(
    cert: CertificateDer<'static>,
    key: PrivateKeyDer<'static>,
    server_socket: InMemoryUdpSocket,
    quinn_config: &QuinnJsonConfig,
    quinn_rng: &mut Rng,
) -> anyhow::Result<Endpoint> {
    let mut seed = [0; 32];
    quinn_rng.fill(&mut seed);

    let mut server_config = quinn::ServerConfig::with_single_cert(vec![cert], key).unwrap();
    server_config.transport = Arc::new(crate::transport_config(quinn_config));
    Endpoint::new_with_abstract_socket(
        crate::endpoint_config(seed),
        Some(server_config),
        Arc::new(server_socket),
        quinn::default_runtime().unwrap(),
    )
    .context("failed to create server endpoint")
}
